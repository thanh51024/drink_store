/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ntthanh.drink_store.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.ntthanh.drink_store.model.OrderDetail;
import com.ntthanh.drink_store.model.OrderDetailModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the OrderDetail service. Represents a row in the &quot;DRINK_STORE_OrderDetail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OrderDetailModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OrderDetailImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OrderDetailImpl
 * @generated
 */
@JSON(strict = true)
public class OrderDetailModelImpl
	extends BaseModelImpl<OrderDetail> implements OrderDetailModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a order detail model instance should use the <code>OrderDetail</code> interface instead.
	 */
	public static final String TABLE_NAME = "DRINK_STORE_OrderDetail";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"orderId", Types.BIGINT},
		{"drinkId", Types.BIGINT}, {"number_", Types.INTEGER},
		{"price", Types.DOUBLE}, {"size_", Types.VARCHAR},
		{"note", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("orderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("drinkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("number_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("price", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("size_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DRINK_STORE_OrderDetail (id_ LONG not null primary key,orderId LONG,drinkId LONG,number_ INTEGER,price DOUBLE,size_ VARCHAR(75) null,note VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table DRINK_STORE_OrderDetail";

	public static final String ORDER_BY_JPQL =
		" ORDER BY orderDetail.orderId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DRINK_STORE_OrderDetail.orderId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ORDERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public OrderDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OrderDetail.class;
	}

	@Override
	public String getModelClassName() {
		return OrderDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<OrderDetail, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<OrderDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OrderDetail, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((OrderDetail)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<OrderDetail, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<OrderDetail, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(OrderDetail)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<OrderDetail, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<OrderDetail, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<OrderDetail, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<OrderDetail, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<OrderDetail, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<OrderDetail, Object>>();
		Map<String, BiConsumer<OrderDetail, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<OrderDetail, ?>>();

		attributeGetterFunctions.put("id", OrderDetail::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<OrderDetail, Long>)OrderDetail::setId);
		attributeGetterFunctions.put("orderId", OrderDetail::getOrderId);
		attributeSetterBiConsumers.put(
			"orderId", (BiConsumer<OrderDetail, Long>)OrderDetail::setOrderId);
		attributeGetterFunctions.put("drinkId", OrderDetail::getDrinkId);
		attributeSetterBiConsumers.put(
			"drinkId", (BiConsumer<OrderDetail, Long>)OrderDetail::setDrinkId);
		attributeGetterFunctions.put("number", OrderDetail::getNumber);
		attributeSetterBiConsumers.put(
			"number", (BiConsumer<OrderDetail, Integer>)OrderDetail::setNumber);
		attributeGetterFunctions.put("price", OrderDetail::getPrice);
		attributeSetterBiConsumers.put(
			"price", (BiConsumer<OrderDetail, Double>)OrderDetail::setPrice);
		attributeGetterFunctions.put("size", OrderDetail::getSize);
		attributeSetterBiConsumers.put(
			"size", (BiConsumer<OrderDetail, String>)OrderDetail::setSize);
		attributeGetterFunctions.put("note", OrderDetail::getNote);
		attributeSetterBiConsumers.put(
			"note", (BiConsumer<OrderDetail, String>)OrderDetail::setNote);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public long getOrderId() {
		return _orderId;
	}

	@Override
	public void setOrderId(long orderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orderId = orderId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOrderId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("orderId"));
	}

	@JSON
	@Override
	public long getDrinkId() {
		return _drinkId;
	}

	@Override
	public void setDrinkId(long drinkId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_drinkId = drinkId;
	}

	@JSON
	@Override
	public int getNumber() {
		return _number;
	}

	@Override
	public void setNumber(int number) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_number = number;
	}

	@JSON
	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_price = price;
	}

	@JSON
	@Override
	public String getSize() {
		if (_size == null) {
			return "";
		}
		else {
			return _size;
		}
	}

	@Override
	public void setSize(String size) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_size = size;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return "";
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_note = note;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, OrderDetail.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OrderDetail toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, OrderDetail>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OrderDetailImpl orderDetailImpl = new OrderDetailImpl();

		orderDetailImpl.setId(getId());
		orderDetailImpl.setOrderId(getOrderId());
		orderDetailImpl.setDrinkId(getDrinkId());
		orderDetailImpl.setNumber(getNumber());
		orderDetailImpl.setPrice(getPrice());
		orderDetailImpl.setSize(getSize());
		orderDetailImpl.setNote(getNote());

		orderDetailImpl.resetOriginalValues();

		return orderDetailImpl;
	}

	@Override
	public OrderDetail cloneWithOriginalValues() {
		OrderDetailImpl orderDetailImpl = new OrderDetailImpl();

		orderDetailImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		orderDetailImpl.setOrderId(
			this.<Long>getColumnOriginalValue("orderId"));
		orderDetailImpl.setDrinkId(
			this.<Long>getColumnOriginalValue("drinkId"));
		orderDetailImpl.setNumber(
			this.<Integer>getColumnOriginalValue("number_"));
		orderDetailImpl.setPrice(this.<Double>getColumnOriginalValue("price"));
		orderDetailImpl.setSize(this.<String>getColumnOriginalValue("size_"));
		orderDetailImpl.setNote(this.<String>getColumnOriginalValue("note"));

		return orderDetailImpl;
	}

	@Override
	public int compareTo(OrderDetail orderDetail) {
		int value = 0;

		if (getOrderId() < orderDetail.getOrderId()) {
			value = -1;
		}
		else if (getOrderId() > orderDetail.getOrderId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof OrderDetail)) {
			return false;
		}

		OrderDetail orderDetail = (OrderDetail)object;

		long primaryKey = orderDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<OrderDetail> toCacheModel() {
		OrderDetailCacheModel orderDetailCacheModel =
			new OrderDetailCacheModel();

		orderDetailCacheModel.id = getId();

		orderDetailCacheModel.orderId = getOrderId();

		orderDetailCacheModel.drinkId = getDrinkId();

		orderDetailCacheModel.number = getNumber();

		orderDetailCacheModel.price = getPrice();

		orderDetailCacheModel.size = getSize();

		String size = orderDetailCacheModel.size;

		if ((size != null) && (size.length() == 0)) {
			orderDetailCacheModel.size = null;
		}

		orderDetailCacheModel.note = getNote();

		String note = orderDetailCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			orderDetailCacheModel.note = null;
		}

		return orderDetailCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<OrderDetail, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<OrderDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OrderDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((OrderDetail)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, OrderDetail>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					OrderDetail.class, ModelWrapper.class);

	}

	private long _id;
	private long _orderId;
	private long _drinkId;
	private int _number;
	private double _price;
	private String _size;
	private String _note;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<OrderDetail, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((OrderDetail)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("orderId", _orderId);
		_columnOriginalValues.put("drinkId", _drinkId);
		_columnOriginalValues.put("number_", _number);
		_columnOriginalValues.put("price", _price);
		_columnOriginalValues.put("size_", _size);
		_columnOriginalValues.put("note", _note);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");
		attributeNames.put("number_", "number");
		attributeNames.put("size_", "size");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("orderId", 2L);

		columnBitmasks.put("drinkId", 4L);

		columnBitmasks.put("number_", 8L);

		columnBitmasks.put("price", 16L);

		columnBitmasks.put("size_", 32L);

		columnBitmasks.put("note", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private OrderDetail _escapedModel;

}