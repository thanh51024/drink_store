/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ntthanh.drink_store.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.ntthanh.drink_store.model.OrderDrink;
import com.ntthanh.drink_store.model.OrderDrinkModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the OrderDrink service. Represents a row in the &quot;DRINK_STORE_OrderDrink&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OrderDrinkModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OrderDrinkImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OrderDrinkImpl
 * @generated
 */
@JSON(strict = true)
public class OrderDrinkModelImpl
	extends BaseModelImpl<OrderDrink> implements OrderDrinkModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a order drink model instance should use the <code>OrderDrink</code> interface instead.
	 */
	public static final String TABLE_NAME = "DRINK_STORE_OrderDrink";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"tableDrinkId", Types.BIGINT},
		{"totalAmount", Types.DOUBLE}, {"orderDate", Types.TIMESTAMP},
		{"paid", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tableDrinkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("totalAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("orderDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("paid", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DRINK_STORE_OrderDrink (id_ LONG not null primary key,tableDrinkId LONG,totalAmount DOUBLE,orderDate DATE null,paid BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table DRINK_STORE_OrderDrink";

	public static final String ORDER_BY_JPQL =
		" ORDER BY orderDrink.orderDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DRINK_STORE_OrderDrink.orderDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ORDERDATE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public OrderDrinkModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OrderDrink.class;
	}

	@Override
	public String getModelClassName() {
		return OrderDrink.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<OrderDrink, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<OrderDrink, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OrderDrink, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((OrderDrink)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<OrderDrink, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<OrderDrink, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(OrderDrink)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<OrderDrink, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<OrderDrink, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<OrderDrink, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<OrderDrink, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<OrderDrink, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<OrderDrink, Object>>();
		Map<String, BiConsumer<OrderDrink, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<OrderDrink, ?>>();

		attributeGetterFunctions.put("id", OrderDrink::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<OrderDrink, Long>)OrderDrink::setId);
		attributeGetterFunctions.put(
			"tableDrinkId", OrderDrink::getTableDrinkId);
		attributeSetterBiConsumers.put(
			"tableDrinkId",
			(BiConsumer<OrderDrink, Long>)OrderDrink::setTableDrinkId);
		attributeGetterFunctions.put("totalAmount", OrderDrink::getTotalAmount);
		attributeSetterBiConsumers.put(
			"totalAmount",
			(BiConsumer<OrderDrink, Double>)OrderDrink::setTotalAmount);
		attributeGetterFunctions.put("orderDate", OrderDrink::getOrderDate);
		attributeSetterBiConsumers.put(
			"orderDate",
			(BiConsumer<OrderDrink, Date>)OrderDrink::setOrderDate);
		attributeGetterFunctions.put("paid", OrderDrink::getPaid);
		attributeSetterBiConsumers.put(
			"paid", (BiConsumer<OrderDrink, Boolean>)OrderDrink::setPaid);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public long getTableDrinkId() {
		return _tableDrinkId;
	}

	@Override
	public void setTableDrinkId(long tableDrinkId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tableDrinkId = tableDrinkId;
	}

	@JSON
	@Override
	public double getTotalAmount() {
		return _totalAmount;
	}

	@Override
	public void setTotalAmount(double totalAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalAmount = totalAmount;
	}

	@JSON
	@Override
	public Date getOrderDate() {
		return _orderDate;
	}

	@Override
	public void setOrderDate(Date orderDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orderDate = orderDate;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Date getOriginalOrderDate() {
		return getColumnOriginalValue("orderDate");
	}

	@JSON
	@Override
	public boolean getPaid() {
		return _paid;
	}

	@JSON
	@Override
	public boolean isPaid() {
		return _paid;
	}

	@Override
	public void setPaid(boolean paid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paid = paid;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, OrderDrink.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OrderDrink toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, OrderDrink>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OrderDrinkImpl orderDrinkImpl = new OrderDrinkImpl();

		orderDrinkImpl.setId(getId());
		orderDrinkImpl.setTableDrinkId(getTableDrinkId());
		orderDrinkImpl.setTotalAmount(getTotalAmount());
		orderDrinkImpl.setOrderDate(getOrderDate());
		orderDrinkImpl.setPaid(isPaid());

		orderDrinkImpl.resetOriginalValues();

		return orderDrinkImpl;
	}

	@Override
	public OrderDrink cloneWithOriginalValues() {
		OrderDrinkImpl orderDrinkImpl = new OrderDrinkImpl();

		orderDrinkImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		orderDrinkImpl.setTableDrinkId(
			this.<Long>getColumnOriginalValue("tableDrinkId"));
		orderDrinkImpl.setTotalAmount(
			this.<Double>getColumnOriginalValue("totalAmount"));
		orderDrinkImpl.setOrderDate(
			this.<Date>getColumnOriginalValue("orderDate"));
		orderDrinkImpl.setPaid(this.<Boolean>getColumnOriginalValue("paid"));

		return orderDrinkImpl;
	}

	@Override
	public int compareTo(OrderDrink orderDrink) {
		int value = 0;

		value = DateUtil.compareTo(getOrderDate(), orderDrink.getOrderDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof OrderDrink)) {
			return false;
		}

		OrderDrink orderDrink = (OrderDrink)object;

		long primaryKey = orderDrink.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<OrderDrink> toCacheModel() {
		OrderDrinkCacheModel orderDrinkCacheModel = new OrderDrinkCacheModel();

		orderDrinkCacheModel.id = getId();

		orderDrinkCacheModel.tableDrinkId = getTableDrinkId();

		orderDrinkCacheModel.totalAmount = getTotalAmount();

		Date orderDate = getOrderDate();

		if (orderDate != null) {
			orderDrinkCacheModel.orderDate = orderDate.getTime();
		}
		else {
			orderDrinkCacheModel.orderDate = Long.MIN_VALUE;
		}

		orderDrinkCacheModel.paid = isPaid();

		return orderDrinkCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<OrderDrink, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<OrderDrink, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OrderDrink, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((OrderDrink)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, OrderDrink>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					OrderDrink.class, ModelWrapper.class);

	}

	private long _id;
	private long _tableDrinkId;
	private double _totalAmount;
	private Date _orderDate;
	private boolean _paid;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<OrderDrink, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((OrderDrink)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("tableDrinkId", _tableDrinkId);
		_columnOriginalValues.put("totalAmount", _totalAmount);
		_columnOriginalValues.put("orderDate", _orderDate);
		_columnOriginalValues.put("paid", _paid);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("tableDrinkId", 2L);

		columnBitmasks.put("totalAmount", 4L);

		columnBitmasks.put("orderDate", 8L);

		columnBitmasks.put("paid", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private OrderDrink _escapedModel;

}